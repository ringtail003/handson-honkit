[{"url":"./","title":"このサイトについて","level":"1.1","keywords":[],"body":"このサイトについて ブログやサポートサイトなどに使える「できるだけ簡単な記事公開の仕組み」が欲しいと思い HonKit を使ってみました。セットアップや詰まったことなどをサポートサイトっぽくまとめています。 このサイト自身もHonKitで作っています。 できあがった記事公開の手順 クローン git clone {repository} 編集 npm run honkit:serve ビルド npm run honkit:build プッシュ git push origin {repository} あとはGitHubにおまかせ ... もっと知りたい 初心者さん向けガイドです。 はじめてガイド 機能アップデートのお知らせです。 リリースノート "},{"url":"01-setup/1-1.html","title":"環境","level":"2.1","keywords":[],"body":" トップ セットアップ 環境 環境 更新日：2022/10/02 このサイトを作った環境です。 主な依存パッケージ パッケージ バージョン Node v16.10 honkit v4.0 tailwindcss v3.1 動作確認したブラウザ ブラウザ 対応 備考 Chrome 対応（v108） Firefox 未対応 CSSの :has 未対応、サイドバーのアクティブ判定がおかしくなる レスポンシブ表示 デスクトップPCしか確認していません。 "},{"url":"01-setup/1-2.html","title":"インストール","level":"2.2","keywords":[],"body":" トップ セットアップ インストール インストール 更新日：2022/10/02 HonKitをインストールします。 npm init -y npm install honkit --save-dev 初期ファイルの作成 コマンドで初期ファイルを作成します。 ./node_modules/.bin/honkit init README.md # Introduction SUMMARY.md # Summary * [Introduction](README.md) 公式ドキュメントの「npx」を使った手順でも同じです。 ビルトインサーバーの立ち上げ npm scriptsを追加して立ち上げます。 package.json \"scripts\": { \"serve\": \"honkit serve\", ... npm run serve http://localhost:4000 で最初のHon（本）を見ることができます。 最初のHon（本） ビルトインサーバーは Ctrl + C で終了します。 npm run serve -- Ctrl + C "},{"url":"01-setup/1-3.html","title":"記事を追加","level":"2.3","keywords":[],"body":" トップ セットアップ 記事を追加 記事を追加 更新日：2022/10/02 記事を作成して何か書いてみます。 touch test.md test.md # 見出し1 本文です ## 見出し2 > ここは引用です 追加した記事をリストに追加します。 SUMMARY.md # Summary * [Introduction](README.md) * [テストページ](test.md) ビルトインサーバーを立ち上げると、サイドバーのアイテムが増え自動的にリンクが貼られています。 追加した記事 フォルダ構造 この時点でフォルダ構造は以下のようになっています。 ├── README.md ├── SUMMARY.md ├── _book │ └── ... ├── test.md ├── node_modules ├── package-lock.json └── package.json 主要なフォルダ・ファイル 説明 README.md トップページに表示するコンテンツ SUMMARY.md 記事リスト _book ビルド時に生成されるファイル群 記事を追加して SUMMARY.md にリンクを貼るとサイドバーとメインコンテンツがよしなに生成される、という仕組みになっています。 記事はマークダウンの他にHTMLでも書くことができます。 HonKitで用意されている機能 ページ上部バーのアイコンで、サイドバーの表示・非表示がトグルします。 サイドバーのトグル メインコンテンツの左右に、前のページ・次のページに移動するアイコンが表示されます。 次のページに移動するアイコン フォントサイズやページのテーマを変更できます。 テーマの変更 "},{"url":"02-customize/2-1.html","title":"tailwindcss","level":"3.1","keywords":[],"body":" トップ カスタマイズ tailwindcss tailwindcss 更新日：2022/10/02 CSSをイチから書くのが面倒なので、tailwindcssを導入しました。 セットアップ npm install tailwindcss --save-dev tailwindcssの設定ファイルを作成します。HonKitの記事は .md または .html で書くので、これらのファイルのCSSクラスがビルドに含まれるよう設定しておきます。 ./node_modules/.bin/tailwind init tailwind.config.js module.exports = { content: [ \"./docs/**/*.{md,html}\", ], ... } tailwindcssのエントリポイントのCSSファイルを作成します。 touch tailwind.css tailwind.css @tailwind base; @tailwind components; @tailwind utilities; ビルトインサーバーの立ち上げとビルドをnpm scriptsに追加しておきます。 package.json \"scripts\": { \"tailwind\": \"tailwindcss\", \"tailwind:build\": \"npm run tailwind -- --input=./tailwind.css --output=./dist.css\", \"tailwind:serve\": \"npm run tailwind:build -- --watch\", ... 読み込み HonKitの設定ファイル book.json でtailwindcssのビルドファイルを読み込むようにします。 touch book.json book.json { ... \"styles\": { \"website\": \"./dist.css\" } } Configuration | HonKithttps://honkit.netlify.app/config.html CSSを使う 設定が完了すれば、いつもどおりtailwindcssのCSSクラスが使えるようになります。 test.md <div class=\"bg-gray-200 p-8 rounded-lg\">テスト</div> tailwindcssのCSSクラスが適用された例 "},{"url":"02-customize/2-2.html","title":"パンくずリスト","level":"3.2","keywords":[],"body":" トップ カスタマイズ パンくずリスト パンくずリスト 更新日：2022/10/02 記事をグループにまとめてアクセスしやすくするため、パンくずリストを設置することにしました。 サイドバーのグループ化 パンくずとサイドバーを同じ階層構造にするため、サイドバーをグループ化します。マークダウン記法で見出しをつけると自動的にグループ化されます。 SUMMARY.md ## グループ1 * [記事1](1.md) * [記事2](2.md) ## グループ2 * [記事3](3.md) * [記事4](4.md) ファイルのグループ化 同じ階層のフォルダにファイルをまとめ、フォルダごとにベースのページを作ることにします。 ├── group1 │ ├── 1.md │ ├── 2.md │ └── base.md ├── group2 │ ├── 3.md │ ├── 4.md │ └── base.md HonKitはサブフォルダに対応しています。 Nunjucks HonKitはNunjucksを使ってマークダウンをHTMLに変換します。 Templating | HonKitHonKit uses the Nunjucks templating language to process pages and theme's templates.https://honkit.netlify.app/templating/ Nunjucksには include や import など別のファイルを読み込むシンタックスがあります。 import | Nunjuckshttps://mozilla.github.io/nunjucks/templating.html#import ベースのページにパンくずリストを設置 ベースのページにパンくずリストと記事コンテンツのブロックを設置します。 base.md <!-- パンくずリスト --> <nav> {%- block breadcrumbs %} <a href=\"/\">トップ</a> <div class=\"icon\"><svg>...</svg></div> <a href=\"/group1/1.html\">グループ1</a> <div class=\"icon\"><svg>...</svg></div> {%- endblock %} </nav> <!-- 記事コンテンツ --> {% block contents %}{% endblock %} それぞれの記事はベースを継承し、パンくずリストの末尾に自身のタイトルを埋め込みます。 1.md --- title: ページ1 --- <!-- ベースを継承 --> {% extends \"./base.md\" %} <!-- パンくずリスト --> {%- block breadcrumbs %} {{ super() }} <span>{{ page.title }}</span> {%- endblock %} <!-- 記事コンテンツ --> {% block contents %} ## コンテンツ 本文 {% endblock %} 冒頭の --- で囲われた部分はそのページのメタデータとして扱われます。本文中で {{ page.変数 }} のように取り出すことができます。 Front Matter | HonKithttps://honkit.netlify.app/pages.html パンくずの見た目をCSSで整えれば完成です。 パンくずリストを設置した例 "},{"url":"02-customize/2-3.html","title":"パーツの利用","level":"3.3","keywords":[],"body":" トップ カスタマイズ パーツの利用 パーツの利用 更新日：2022/10/02 Tipsなど共有コンポーネント的に使いたいものがあり、これをパーツとして登録することにしました。 Nunjucksのマクロ 不特定他数の場所から呼び出せるよう、Nunjucksのマクロを使います。 macro | Nunjuckshttps://mozilla.github.io/nunjucks/templating.html#macro マクロは 関数名(引数, 引数...) のように宣言します。 tips.html {%- macro render(description=\"\") %} <div class=\"border p-8 flex\"> <svg>...</svg> <span class=\"text-sm\">{{ description }}</span> </div> {%- endmacro %} 共有コンポーネントの呼び出し 別ファイルで宣言したマクロを import \"ファイル名\" as 変数 のように読み込んで呼び出します。 1.md {% import \"./tips.html\" as tips %} ## 見出し 本文です。 {{- tips.render(\"1つ目の説明です\") }} 本文です。 {{- tips.render(\"2つ目の説明です\") }} 呼び出した場所で、マクロに書いたHTMLが展開されます。 Tipsを設置した例 参考：ホワイトスペースの扱い マクロに書いたHTMLのインデントはマークダウンの「空白2つをコードブロックの開始とみなす」ルールとバッティングして、予想しないレンダリング結果になることがあります。 Numjucksのタグに {%- や {{- のようにハイフンを付けると空白を取り除いたHTMLを展開できるため、マークダウンにHTMLを埋め込む場合は付けておいたほうが無難です。 {%- macro render(description=\"\") %} ... {%- endmacro %} {{- render(\"説明です\") }} Whitespace Control | Nunjuckshttps://mozilla.github.io/nunjucks/templating.html#whitespace-control "},{"url":"02-customize/2-4.html","title":"ヘッダーの共通化","level":"3.4","keywords":[],"body":" トップ カスタマイズ ヘッダーの共通化 ヘッダーの共通化 更新日：2022/10/02 ロゴなど埋め込むために各ページ共通のヘッダを設置することにしました。 全体の外観はデフォルトのテーマが適用されますが _layouts フォルダにHTMLを追加するとヘッダーなどページの一部分を差し替えることができます。 Theming | HonKithttps://honkit.netlify.app/themes/ ヘッダ用ファイルの作成 header.html を追加します。 _layouts/website/header.html {% block book_header %} <header> <a href=\"...\"> <img src=\"./logo.png\" alt=\"ロゴ\"> </a> </header> {% endblock %} このファイルはサイト共通のヘッダとして扱われ、トップページや記事ページなど全てのページで表示されます。 ヘッダーを設置した例 参考：ファイル名・ブロック名の仕様 HonKitのドキュメントには website/page.html が記事ページのレイアウト（ブラウザ用）として使われると書いてありますが、他にどんなファイルが配置できるのか、どんなブロック名が使えるのか記載がありません。 website はもともとGitBookにあった仕組みのため、ファイル名やブロック名は本家GitBookのソースコードを参考にしました。アーカイブ済リポジトリのため、コピペしたコードをそのままGitBookにデプロイしても動作する保証はありませんが、シンタックスやブロック名の参考になりました。 _layouts | GitBookIO/theme-defaulthttps://github.com/GitbookIO/theme-default/tree/a8e920453dc8e4eb522840b61606486622848099/_layouts/website またHonKitのドキュメントで実際にHonKitで構築したサイトとそのソースコードが公開されているため、とても参考になりました。 Examples | HonKithttps://honkit.netlify.app/examples.html "},{"url":"02-customize/2-5.html","title":"サイト内検索","level":"3.5","keywords":[],"body":" トップ カスタマイズ サイト内検索 サイト内検索 更新日：2022/10/02 HonKitはデフォルトでサイト内検索機能があり、サイドバー上部にクエリ入力欄があります。 サイドバー上部のクエリ入力欄 使ってみたところクエリは記事タイトルに部分マッチするようです。できれば本文ともマッチさせたいのでプラグインを入れました。 プラグインのインストール 採用した理由は「導入が一番かんたんそうだから」という安直なものです。 @dogatana/honkit-plugin-search-plus | npmjshttps://www.npmjs.com/package/honkit-plugin-search-plus npm install @dogatana/honkit-plugin-search-plus --save-dev book.json でデフォルトの検索機能をオフにしつつ、インストールしたプラグインを有効にします。 book.json { \"plugins\": [ \"-lunr\", \"-search\", \"@dogatana/honkit-plugin-search-plus\" ], ... } このプラグインは記事本文のみマッチするようです。記事タイトルもマッチさせたい場合は、見出しやパンくずなどでタイトルを本文として書き出しておく必要があります。 検索結果 "},{"url":"issue.html","title":"詰まったところ","level":"4.1","keywords":[],"body":"詰まったところ tailwindcssのプリフライトが効かない😢 サイドバーのIntroductionが消えない😢 Nunjucksのコード補完がない😢 NunjucksをPrettierで整形すると崩れる😢 "},{"url":"03-issue/3-1.html","title":"tailwindcssのプリフライトが効かない","level":"4.1.1","keywords":[],"body":" トップ 詰まったところ tailwindcssのプリフライトが効かない tailwindcssのプリフライトが効かない 更新日：2022/10/02 tailwindcssには「プリフライト」という機能があります。デフォルトの見た目をいったんまっさらにしてからスタイルをあてることで、環境依存による見た目のばらつきがなくなるものです。 Preflight | tailwindcsshttps://tailwindcss.com/docs/preflight HonKitのデフォルトテーマ（元はGitBookのテーマの仕組み）はCSSを自力で書かずともいい感じに見た目が整うよう設計されていて、後から追加したtailwindcssのプリフライトでまっさらにできない部分があるようです。 <!-- pやulにマージンがついてしまう --> <p class=\"m-0\"></p> <!-- サイドバーに付与されたクラスの見た目が打ち消せない --> <ul class=\"summary\"> <li class=\"chapter active\"> <a href=\"...\"></a> </li> </ul> 解決策１）npmで公開されたテーマを使う HonKitのドキュメントにテーマはプラグインとして公開されているとあるため、テーマの変更がおそらく正攻法です。 Publish a theme | HonKithttps://honkit.netlify.app/themes/ GitBookのために作られた gitbook-plugin- を honkit-plugin- に置き換えれば動作するとの情報もあり、何なら自分でテーマを作ってプラグインとして公開すれば完全にカスタムできそうです。 ちょっと使って試してみるにはハードルが高かったのでこの方法はあきらめましたが、がっつりサイト構築するにはプラグインが良さそうに思います。 解決策２）tailwindcssで上書きする はがゆいところをtailwindcssで上書きする方法です。ゴリ押し感が強いですが、サイドバーの見た目など一部だけ書き換えるにはてっとり早いです。 今回はこの方法を使いました。 tailwind.css @layer base { p { @apply m-0 !important; } .book-summary ul.summary li.header { @apply font-semibold text-gray-600; } } "},{"url":"03-issue/3-2.html","title":"サイドバーのIntroductionが消えない","level":"4.1.2","keywords":[],"body":" トップ 詰まったところ サイドバーのIntroductionが消えない サイドバーのIntroductionが消えない 更新日：2022/10/02 1.md のような記事ページのひとつをトップページとして使おうと思い、しばらく格闘していました。 SUMMARY.md に README.md を含めないとビルドのエラーになる、タイトルなしのリンクにすると「Introduction」がサイドバーに出現する、見出しレベル2に属していないと直前の見出しグループに出現する...といった具合です。 SUMMARY.md ## グループ1 - [ページ1](1.md) - [ページ2](2.md) # グループなし * [](README.md) ## グループ2 - [ページ1](1.md) - [ページ2](2.md) 思わぬ位置にIntroductionが出現 解決策）READMEをリストのトップに移動する README.md を見出しレベルなしでリストのトップに追加します。このページへのリンクはマストのため何かしらタイトルをあてがう必要があります。 これだけなんですがけっこう悩みました。 SUMMARY.md * [トップページ](README.md) ## グループ1 - [ページ1](1.md) - [ページ2](2.md) "},{"url":"03-issue/3-3.html","title":"Nunjucksのコード補完がない","level":"4.1.3","keywords":[],"body":" トップ 詰まったところ Nunjucksのコード補完がない Nunjucksのコード補完がない 更新日：2022/10/02 Numjucksの記法やビルトインのフィルタなどコード補完がなく、ドキュメントを探し当てつつ、ビルドのエラーを読みつつ、の開発にしんどさがありました。引数に入ってきたオブジェクトを展開するフィルタもなく、デバッグもちょっとしんどい感じでした。 something.md {% macro render(page) %} {{ pagee }} <!-- スペルミスに気づけない --> {{ page }} <!-- \"[Object]が展開される\" --> {% endmacro %} Try）エディタのエクステンションを使う ドキュメントにVSCodeエクステンションがあったので使ってみましたが .nunjucks などNunjucks専用の拡張子でないと補完が効かないようです。 Syntax Highlighting | Nunjuckshttps://mozilla.github.io/nunjucks/templating.html#syntax-highlighting "},{"url":"03-issue/3-4.html","title":"NunjucksをPrettierで整形すると崩れる","level":"4.1.4","keywords":[],"body":" トップ 詰まったところ NunjucksをPrettierで整形すると崩れる NunjucksをPrettierで整形すると崩れる 更新日：2022/10/02 HTMLを整形するためにPrettierを使いたかったのですが改行が切り詰められてしまい、HTMLを取るかNunjucksを取るか迷いました。 before.html {% import \"../icons/1.html\" as icon1 %} {% import \"../icons/2.html\" as icon2 %} {% import \"../icons/3.html\" as icon3 %} {%- macro render(title=\"\",url=\"\",description=\"\") %} <div ><svg viewBox=\"0 0 24 24\"><g stroke=\"none\" stroke-width=\"1\"></g></svg></div> {%- endmacro %} after.html {% import \"../icons/1.html\" as icon1 %} {% import \"../icons/2.html\" as icon2 %} {% import \"../icons/3.html\" as icon3 %} {%- macro render(title=\"\",url=\"\",description=\"\") %} <div> <svg viewBox=\"0 0 24 24\"> <g stroke=\"none\" stroke-width=\"1\"></g> </svg> </div> {%- endmacro %} Try）Prettierプラグインを試す 公式ではないですが有志のプラグインがあるので次回試してみようと思います。 "}]